// Code generated by MockGen. DO NOT EDIT.
// Source: ./admin_google_auth_repository.go

// Package adminGoogle is a generated GoMock package.
package adminGoogle

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAdminGoogleAuthRepository is a mock of AdminGoogleAuthRepository interface.
type MockAdminGoogleAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdminGoogleAuthRepositoryMockRecorder
}

// MockAdminGoogleAuthRepositoryMockRecorder is the mock recorder for MockAdminGoogleAuthRepository.
type MockAdminGoogleAuthRepositoryMockRecorder struct {
	mock *MockAdminGoogleAuthRepository
}

// NewMockAdminGoogleAuthRepository creates a new mock instance.
func NewMockAdminGoogleAuthRepository(ctrl *gomock.Controller) *MockAdminGoogleAuthRepository {
	mock := &MockAdminGoogleAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAdminGoogleAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminGoogleAuthRepository) EXPECT() *MockAdminGoogleAuthRepositoryMockRecorder {
	return m.recorder
}

// GetAdminGoogleToken mocks base method.
func (m *MockAdminGoogleAuthRepository) GetAdminGoogleToken(ctx context.Context, code string) (*AdminGoogleToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminGoogleToken", ctx, code)
	ret0, _ := ret[0].(*AdminGoogleToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminGoogleToken indicates an expected call of GetAdminGoogleToken.
func (mr *MockAdminGoogleAuthRepositoryMockRecorder) GetAdminGoogleToken(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminGoogleToken", reflect.TypeOf((*MockAdminGoogleAuthRepository)(nil).GetAdminGoogleToken), ctx, code)
}

// GetAdminGoogleTokenInfo mocks base method.
func (m *MockAdminGoogleAuthRepository) GetAdminGoogleTokenInfo(ctx context.Context, accessToken string) (*AdminGoogleTokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminGoogleTokenInfo", ctx, accessToken)
	ret0, _ := ret[0].(*AdminGoogleTokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminGoogleTokenInfo indicates an expected call of GetAdminGoogleTokenInfo.
func (mr *MockAdminGoogleAuthRepositoryMockRecorder) GetAdminGoogleTokenInfo(ctx, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminGoogleTokenInfo", reflect.TypeOf((*MockAdminGoogleAuthRepository)(nil).GetAdminGoogleTokenInfo), ctx, accessToken)
}

// GetAdminGoogleUrl mocks base method.
func (m *MockAdminGoogleAuthRepository) GetAdminGoogleUrl() (*AdminGoogleURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminGoogleUrl")
	ret0, _ := ret[0].(*AdminGoogleURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminGoogleUrl indicates an expected call of GetAdminGoogleUrl.
func (mr *MockAdminGoogleAuthRepositoryMockRecorder) GetAdminGoogleUrl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminGoogleUrl", reflect.TypeOf((*MockAdminGoogleAuthRepository)(nil).GetAdminGoogleUrl))
}

// RefreshAdminGoogleToken mocks base method.
func (m *MockAdminGoogleAuthRepository) RefreshAdminGoogleToken(ctx context.Context, refreshToken string) (*AdminGoogleToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshAdminGoogleToken", ctx, refreshToken)
	ret0, _ := ret[0].(*AdminGoogleToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshAdminGoogleToken indicates an expected call of RefreshAdminGoogleToken.
func (mr *MockAdminGoogleAuthRepositoryMockRecorder) RefreshAdminGoogleToken(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAdminGoogleToken", reflect.TypeOf((*MockAdminGoogleAuthRepository)(nil).RefreshAdminGoogleToken), ctx, refreshToken)
}
