// Code generated by MockGen. DO NOT EDIT.
// Source: ./common_health_mysql_repository.gen.go

// Package commonHealth is a generated GoMock package.
package commonHealth

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockCommonHealthMysqlRepository is a mock of CommonHealthMysqlRepository interface.
type MockCommonHealthMysqlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommonHealthMysqlRepositoryMockRecorder
}

// MockCommonHealthMysqlRepositoryMockRecorder is the mock recorder for MockCommonHealthMysqlRepository.
type MockCommonHealthMysqlRepositoryMockRecorder struct {
	mock *MockCommonHealthMysqlRepository
}

// NewMockCommonHealthMysqlRepository creates a new mock instance.
func NewMockCommonHealthMysqlRepository(ctrl *gomock.Controller) *MockCommonHealthMysqlRepository {
	mock := &MockCommonHealthMysqlRepository{ctrl: ctrl}
	mock.recorder = &MockCommonHealthMysqlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommonHealthMysqlRepository) EXPECT() *MockCommonHealthMysqlRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockCommonHealthMysqlRepository) Create(ctx context.Context, tx *gorm.DB, m *CommonHealth) (*CommonHealth, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, tx, m)
	ret0, _ := ret[0].(*CommonHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCommonHealthMysqlRepositoryMockRecorder) Create(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommonHealthMysqlRepository)(nil).Create), ctx, tx, m)
}

// CreateList mocks base method.
func (m *MockCommonHealthMysqlRepository) CreateList(ctx context.Context, tx *gorm.DB, ms CommonHealths) (CommonHealths, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, tx, ms)
	ret0, _ := ret[0].(CommonHealths)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockCommonHealthMysqlRepositoryMockRecorder) CreateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockCommonHealthMysqlRepository)(nil).CreateList), ctx, tx, ms)
}

// Delete mocks base method.
func (m_2 *MockCommonHealthMysqlRepository) Delete(ctx context.Context, tx *gorm.DB, m *CommonHealth) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCommonHealthMysqlRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommonHealthMysqlRepository)(nil).Delete), ctx, tx, m)
}

// DeleteList mocks base method.
func (m *MockCommonHealthMysqlRepository) DeleteList(ctx context.Context, tx *gorm.DB, ms CommonHealths) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteList", ctx, tx, ms)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteList indicates an expected call of DeleteList.
func (mr *MockCommonHealthMysqlRepositoryMockRecorder) DeleteList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteList", reflect.TypeOf((*MockCommonHealthMysqlRepository)(nil).DeleteList), ctx, tx, ms)
}

// Find mocks base method.
func (m *MockCommonHealthMysqlRepository) Find(ctx context.Context, healthId int64) (*CommonHealth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, healthId)
	ret0, _ := ret[0].(*CommonHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockCommonHealthMysqlRepositoryMockRecorder) Find(ctx, healthId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCommonHealthMysqlRepository)(nil).Find), ctx, healthId)
}

// FindList mocks base method.
func (m *MockCommonHealthMysqlRepository) FindList(ctx context.Context) (CommonHealths, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", ctx)
	ret0, _ := ret[0].(CommonHealths)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockCommonHealthMysqlRepositoryMockRecorder) FindList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockCommonHealthMysqlRepository)(nil).FindList), ctx)
}

// FindOrNil mocks base method.
func (m *MockCommonHealthMysqlRepository) FindOrNil(ctx context.Context, healthId int64) (*CommonHealth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, healthId)
	ret0, _ := ret[0].(*CommonHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockCommonHealthMysqlRepositoryMockRecorder) FindOrNil(ctx, healthId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockCommonHealthMysqlRepository)(nil).FindOrNil), ctx, healthId)
}

// Update mocks base method.
func (m_2 *MockCommonHealthMysqlRepository) Update(ctx context.Context, tx *gorm.DB, m *CommonHealth) (*CommonHealth, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, tx, m)
	ret0, _ := ret[0].(*CommonHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCommonHealthMysqlRepositoryMockRecorder) Update(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCommonHealthMysqlRepository)(nil).Update), ctx, tx, m)
}

// UpdateList mocks base method.
func (m *MockCommonHealthMysqlRepository) UpdateList(ctx context.Context, tx *gorm.DB, ms CommonHealths) (CommonHealths, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateList", ctx, tx, ms)
	ret0, _ := ret[0].(CommonHealths)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateList indicates an expected call of UpdateList.
func (mr *MockCommonHealthMysqlRepositoryMockRecorder) UpdateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateList", reflect.TypeOf((*MockCommonHealthMysqlRepository)(nil).UpdateList), ctx, tx, ms)
}
