// Code generated by MockGen. DO NOT EDIT.
// Source: ./action_service.go

// Package action is a generated GoMock package.
package action

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockActionService is a mock of ActionService interface.
type MockActionService struct {
	ctrl     *gomock.Controller
	recorder *MockActionServiceMockRecorder
}

// MockActionServiceMockRecorder is the mock recorder for MockActionService.
type MockActionServiceMockRecorder struct {
	mock *MockActionService
}

// NewMockActionService creates a new mock instance.
func NewMockActionService(ctrl *gomock.Controller) *MockActionService {
	mock := &MockActionService{ctrl: ctrl}
	mock.recorder = &MockActionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionService) EXPECT() *MockActionServiceMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockActionService) Check(ctx context.Context, now time.Time, req *ActionCheckRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, now, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockActionServiceMockRecorder) Check(ctx, now, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockActionService)(nil).Check), ctx, now, req)
}

// GetListMaster mocks base method.
func (m *MockActionService) GetListMaster(ctx context.Context) (*ActionGetListMasterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListMaster", ctx)
	ret0, _ := ret[0].(*ActionGetListMasterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListMaster indicates an expected call of GetListMaster.
func (mr *MockActionServiceMockRecorder) GetListMaster(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListMaster", reflect.TypeOf((*MockActionService)(nil).GetListMaster), ctx)
}

// Run mocks base method.
func (m *MockActionService) Run(ctx context.Context, tx *gorm.DB, now time.Time, req *ActionRunRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, tx, now, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockActionServiceMockRecorder) Run(ctx, tx, now, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockActionService)(nil).Run), ctx, tx, now, req)
}
