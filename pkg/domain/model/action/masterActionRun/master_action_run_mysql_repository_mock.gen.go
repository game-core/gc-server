// Code generated by MockGen. DO NOT EDIT.
// Source: ./master_action_run_mysql_repository.gen.go

// Package masterActionRun is a generated GoMock package.
package masterActionRun

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockMasterActionRunMysqlRepository is a mock of MasterActionRunMysqlRepository interface.
type MockMasterActionRunMysqlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMasterActionRunMysqlRepositoryMockRecorder
}

// MockMasterActionRunMysqlRepositoryMockRecorder is the mock recorder for MockMasterActionRunMysqlRepository.
type MockMasterActionRunMysqlRepositoryMockRecorder struct {
	mock *MockMasterActionRunMysqlRepository
}

// NewMockMasterActionRunMysqlRepository creates a new mock instance.
func NewMockMasterActionRunMysqlRepository(ctrl *gomock.Controller) *MockMasterActionRunMysqlRepository {
	mock := &MockMasterActionRunMysqlRepository{ctrl: ctrl}
	mock.recorder = &MockMasterActionRunMysqlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasterActionRunMysqlRepository) EXPECT() *MockMasterActionRunMysqlRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockMasterActionRunMysqlRepository) Create(ctx context.Context, tx *gorm.DB, m *MasterActionRun) (*MasterActionRun, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, tx, m)
	ret0, _ := ret[0].(*MasterActionRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMasterActionRunMysqlRepositoryMockRecorder) Create(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMasterActionRunMysqlRepository)(nil).Create), ctx, tx, m)
}

// CreateList mocks base method.
func (m *MockMasterActionRunMysqlRepository) CreateList(ctx context.Context, tx *gorm.DB, ms MasterActionRuns) (MasterActionRuns, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, tx, ms)
	ret0, _ := ret[0].(MasterActionRuns)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockMasterActionRunMysqlRepositoryMockRecorder) CreateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockMasterActionRunMysqlRepository)(nil).CreateList), ctx, tx, ms)
}

// Delete mocks base method.
func (m_2 *MockMasterActionRunMysqlRepository) Delete(ctx context.Context, tx *gorm.DB, m *MasterActionRun) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMasterActionRunMysqlRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMasterActionRunMysqlRepository)(nil).Delete), ctx, tx, m)
}

// Find mocks base method.
func (m *MockMasterActionRunMysqlRepository) Find(ctx context.Context, masterActionRunId int64) (*MasterActionRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, masterActionRunId)
	ret0, _ := ret[0].(*MasterActionRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMasterActionRunMysqlRepositoryMockRecorder) Find(ctx, masterActionRunId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMasterActionRunMysqlRepository)(nil).Find), ctx, masterActionRunId)
}

// FindByMasterActionId mocks base method.
func (m *MockMasterActionRunMysqlRepository) FindByMasterActionId(ctx context.Context, masterActionId int64) (*MasterActionRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMasterActionId", ctx, masterActionId)
	ret0, _ := ret[0].(*MasterActionRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMasterActionId indicates an expected call of FindByMasterActionId.
func (mr *MockMasterActionRunMysqlRepositoryMockRecorder) FindByMasterActionId(ctx, masterActionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMasterActionId", reflect.TypeOf((*MockMasterActionRunMysqlRepository)(nil).FindByMasterActionId), ctx, masterActionId)
}

// FindList mocks base method.
func (m *MockMasterActionRunMysqlRepository) FindList(ctx context.Context) (MasterActionRuns, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", ctx)
	ret0, _ := ret[0].(MasterActionRuns)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockMasterActionRunMysqlRepositoryMockRecorder) FindList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockMasterActionRunMysqlRepository)(nil).FindList), ctx)
}

// FindListByMasterActionId mocks base method.
func (m *MockMasterActionRunMysqlRepository) FindListByMasterActionId(ctx context.Context, masterActionId int64) (MasterActionRuns, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByMasterActionId", ctx, masterActionId)
	ret0, _ := ret[0].(MasterActionRuns)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByMasterActionId indicates an expected call of FindListByMasterActionId.
func (mr *MockMasterActionRunMysqlRepositoryMockRecorder) FindListByMasterActionId(ctx, masterActionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByMasterActionId", reflect.TypeOf((*MockMasterActionRunMysqlRepository)(nil).FindListByMasterActionId), ctx, masterActionId)
}

// FindOrNil mocks base method.
func (m *MockMasterActionRunMysqlRepository) FindOrNil(ctx context.Context, masterActionRunId int64) (*MasterActionRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, masterActionRunId)
	ret0, _ := ret[0].(*MasterActionRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockMasterActionRunMysqlRepositoryMockRecorder) FindOrNil(ctx, masterActionRunId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockMasterActionRunMysqlRepository)(nil).FindOrNil), ctx, masterActionRunId)
}

// FindOrNilByMasterActionId mocks base method.
func (m *MockMasterActionRunMysqlRepository) FindOrNilByMasterActionId(ctx context.Context, masterActionId int64) (*MasterActionRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByMasterActionId", ctx, masterActionId)
	ret0, _ := ret[0].(*MasterActionRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByMasterActionId indicates an expected call of FindOrNilByMasterActionId.
func (mr *MockMasterActionRunMysqlRepositoryMockRecorder) FindOrNilByMasterActionId(ctx, masterActionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByMasterActionId", reflect.TypeOf((*MockMasterActionRunMysqlRepository)(nil).FindOrNilByMasterActionId), ctx, masterActionId)
}

// Update mocks base method.
func (m_2 *MockMasterActionRunMysqlRepository) Update(ctx context.Context, tx *gorm.DB, m *MasterActionRun) (*MasterActionRun, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, tx, m)
	ret0, _ := ret[0].(*MasterActionRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMasterActionRunMysqlRepositoryMockRecorder) Update(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMasterActionRunMysqlRepository)(nil).Update), ctx, tx, m)
}
