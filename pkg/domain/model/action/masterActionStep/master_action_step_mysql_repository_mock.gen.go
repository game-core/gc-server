// Code generated by MockGen. DO NOT EDIT.
// Source: ./master_action_step_mysql_repository.gen.go

// Package masterActionStep is a generated GoMock package.
package masterActionStep

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockMasterActionStepMysqlRepository is a mock of MasterActionStepMysqlRepository interface.
type MockMasterActionStepMysqlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMasterActionStepMysqlRepositoryMockRecorder
}

// MockMasterActionStepMysqlRepositoryMockRecorder is the mock recorder for MockMasterActionStepMysqlRepository.
type MockMasterActionStepMysqlRepositoryMockRecorder struct {
	mock *MockMasterActionStepMysqlRepository
}

// NewMockMasterActionStepMysqlRepository creates a new mock instance.
func NewMockMasterActionStepMysqlRepository(ctrl *gomock.Controller) *MockMasterActionStepMysqlRepository {
	mock := &MockMasterActionStepMysqlRepository{ctrl: ctrl}
	mock.recorder = &MockMasterActionStepMysqlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasterActionStepMysqlRepository) EXPECT() *MockMasterActionStepMysqlRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockMasterActionStepMysqlRepository) Create(ctx context.Context, tx *gorm.DB, m *MasterActionStep) (*MasterActionStep, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, tx, m)
	ret0, _ := ret[0].(*MasterActionStep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMasterActionStepMysqlRepositoryMockRecorder) Create(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMasterActionStepMysqlRepository)(nil).Create), ctx, tx, m)
}

// CreateList mocks base method.
func (m *MockMasterActionStepMysqlRepository) CreateList(ctx context.Context, tx *gorm.DB, ms MasterActionSteps) (MasterActionSteps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, tx, ms)
	ret0, _ := ret[0].(MasterActionSteps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockMasterActionStepMysqlRepositoryMockRecorder) CreateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockMasterActionStepMysqlRepository)(nil).CreateList), ctx, tx, ms)
}

// Delete mocks base method.
func (m_2 *MockMasterActionStepMysqlRepository) Delete(ctx context.Context, tx *gorm.DB, m *MasterActionStep) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMasterActionStepMysqlRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMasterActionStepMysqlRepository)(nil).Delete), ctx, tx, m)
}

// Find mocks base method.
func (m *MockMasterActionStepMysqlRepository) Find(ctx context.Context, masterActionStepId int64) (*MasterActionStep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, masterActionStepId)
	ret0, _ := ret[0].(*MasterActionStep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMasterActionStepMysqlRepositoryMockRecorder) Find(ctx, masterActionStepId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMasterActionStepMysqlRepository)(nil).Find), ctx, masterActionStepId)
}

// FindByMasterActionStepEnum mocks base method.
func (m *MockMasterActionStepMysqlRepository) FindByMasterActionStepEnum(ctx context.Context, masterActionStepEnum MasterActionStepEnum) (*MasterActionStep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMasterActionStepEnum", ctx, masterActionStepEnum)
	ret0, _ := ret[0].(*MasterActionStep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMasterActionStepEnum indicates an expected call of FindByMasterActionStepEnum.
func (mr *MockMasterActionStepMysqlRepositoryMockRecorder) FindByMasterActionStepEnum(ctx, masterActionStepEnum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMasterActionStepEnum", reflect.TypeOf((*MockMasterActionStepMysqlRepository)(nil).FindByMasterActionStepEnum), ctx, masterActionStepEnum)
}

// FindList mocks base method.
func (m *MockMasterActionStepMysqlRepository) FindList(ctx context.Context) (MasterActionSteps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", ctx)
	ret0, _ := ret[0].(MasterActionSteps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockMasterActionStepMysqlRepositoryMockRecorder) FindList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockMasterActionStepMysqlRepository)(nil).FindList), ctx)
}

// FindListByMasterActionStepEnum mocks base method.
func (m *MockMasterActionStepMysqlRepository) FindListByMasterActionStepEnum(ctx context.Context, masterActionStepEnum MasterActionStepEnum) (MasterActionSteps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByMasterActionStepEnum", ctx, masterActionStepEnum)
	ret0, _ := ret[0].(MasterActionSteps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByMasterActionStepEnum indicates an expected call of FindListByMasterActionStepEnum.
func (mr *MockMasterActionStepMysqlRepositoryMockRecorder) FindListByMasterActionStepEnum(ctx, masterActionStepEnum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByMasterActionStepEnum", reflect.TypeOf((*MockMasterActionStepMysqlRepository)(nil).FindListByMasterActionStepEnum), ctx, masterActionStepEnum)
}

// FindOrNil mocks base method.
func (m *MockMasterActionStepMysqlRepository) FindOrNil(ctx context.Context, masterActionStepId int64) (*MasterActionStep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, masterActionStepId)
	ret0, _ := ret[0].(*MasterActionStep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockMasterActionStepMysqlRepositoryMockRecorder) FindOrNil(ctx, masterActionStepId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockMasterActionStepMysqlRepository)(nil).FindOrNil), ctx, masterActionStepId)
}

// FindOrNilByMasterActionStepEnum mocks base method.
func (m *MockMasterActionStepMysqlRepository) FindOrNilByMasterActionStepEnum(ctx context.Context, masterActionStepEnum MasterActionStepEnum) (*MasterActionStep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByMasterActionStepEnum", ctx, masterActionStepEnum)
	ret0, _ := ret[0].(*MasterActionStep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByMasterActionStepEnum indicates an expected call of FindOrNilByMasterActionStepEnum.
func (mr *MockMasterActionStepMysqlRepositoryMockRecorder) FindOrNilByMasterActionStepEnum(ctx, masterActionStepEnum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByMasterActionStepEnum", reflect.TypeOf((*MockMasterActionStepMysqlRepository)(nil).FindOrNilByMasterActionStepEnum), ctx, masterActionStepEnum)
}

// Update mocks base method.
func (m_2 *MockMasterActionStepMysqlRepository) Update(ctx context.Context, tx *gorm.DB, m *MasterActionStep) (*MasterActionStep, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, tx, m)
	ret0, _ := ret[0].(*MasterActionStep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMasterActionStepMysqlRepositoryMockRecorder) Update(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMasterActionStepMysqlRepository)(nil).Update), ctx, tx, m)
}
