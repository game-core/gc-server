// Code generated by MockGen. DO NOT EDIT.
// Source: ./master_rarity_mysql_repository.gen.go

// Package masterRarity is a generated GoMock package.
package masterRarity

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockMasterRarityMysqlRepository is a mock of MasterRarityMysqlRepository interface.
type MockMasterRarityMysqlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMasterRarityMysqlRepositoryMockRecorder
}

// MockMasterRarityMysqlRepositoryMockRecorder is the mock recorder for MockMasterRarityMysqlRepository.
type MockMasterRarityMysqlRepositoryMockRecorder struct {
	mock *MockMasterRarityMysqlRepository
}

// NewMockMasterRarityMysqlRepository creates a new mock instance.
func NewMockMasterRarityMysqlRepository(ctrl *gomock.Controller) *MockMasterRarityMysqlRepository {
	mock := &MockMasterRarityMysqlRepository{ctrl: ctrl}
	mock.recorder = &MockMasterRarityMysqlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasterRarityMysqlRepository) EXPECT() *MockMasterRarityMysqlRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockMasterRarityMysqlRepository) Create(ctx context.Context, tx *gorm.DB, m *MasterRarity) (*MasterRarity, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, tx, m)
	ret0, _ := ret[0].(*MasterRarity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMasterRarityMysqlRepositoryMockRecorder) Create(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMasterRarityMysqlRepository)(nil).Create), ctx, tx, m)
}

// CreateList mocks base method.
func (m *MockMasterRarityMysqlRepository) CreateList(ctx context.Context, tx *gorm.DB, ms MasterRarities) (MasterRarities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, tx, ms)
	ret0, _ := ret[0].(MasterRarities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockMasterRarityMysqlRepositoryMockRecorder) CreateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockMasterRarityMysqlRepository)(nil).CreateList), ctx, tx, ms)
}

// Delete mocks base method.
func (m_2 *MockMasterRarityMysqlRepository) Delete(ctx context.Context, tx *gorm.DB, m *MasterRarity) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMasterRarityMysqlRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMasterRarityMysqlRepository)(nil).Delete), ctx, tx, m)
}

// DeleteList mocks base method.
func (m *MockMasterRarityMysqlRepository) DeleteList(ctx context.Context, tx *gorm.DB, ms MasterRarities) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteList", ctx, tx, ms)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteList indicates an expected call of DeleteList.
func (mr *MockMasterRarityMysqlRepositoryMockRecorder) DeleteList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteList", reflect.TypeOf((*MockMasterRarityMysqlRepository)(nil).DeleteList), ctx, tx, ms)
}

// Find mocks base method.
func (m *MockMasterRarityMysqlRepository) Find(ctx context.Context, masterRarityId int64) (*MasterRarity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, masterRarityId)
	ret0, _ := ret[0].(*MasterRarity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMasterRarityMysqlRepositoryMockRecorder) Find(ctx, masterRarityId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMasterRarityMysqlRepository)(nil).Find), ctx, masterRarityId)
}

// FindByMasterRarityEnum mocks base method.
func (m *MockMasterRarityMysqlRepository) FindByMasterRarityEnum(ctx context.Context, masterRarityEnum MasterRarityEnum) (*MasterRarity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMasterRarityEnum", ctx, masterRarityEnum)
	ret0, _ := ret[0].(*MasterRarity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMasterRarityEnum indicates an expected call of FindByMasterRarityEnum.
func (mr *MockMasterRarityMysqlRepositoryMockRecorder) FindByMasterRarityEnum(ctx, masterRarityEnum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMasterRarityEnum", reflect.TypeOf((*MockMasterRarityMysqlRepository)(nil).FindByMasterRarityEnum), ctx, masterRarityEnum)
}

// FindList mocks base method.
func (m *MockMasterRarityMysqlRepository) FindList(ctx context.Context) (MasterRarities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", ctx)
	ret0, _ := ret[0].(MasterRarities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockMasterRarityMysqlRepositoryMockRecorder) FindList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockMasterRarityMysqlRepository)(nil).FindList), ctx)
}

// FindListByMasterRarityEnum mocks base method.
func (m *MockMasterRarityMysqlRepository) FindListByMasterRarityEnum(ctx context.Context, masterRarityEnum MasterRarityEnum) (MasterRarities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByMasterRarityEnum", ctx, masterRarityEnum)
	ret0, _ := ret[0].(MasterRarities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByMasterRarityEnum indicates an expected call of FindListByMasterRarityEnum.
func (mr *MockMasterRarityMysqlRepositoryMockRecorder) FindListByMasterRarityEnum(ctx, masterRarityEnum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByMasterRarityEnum", reflect.TypeOf((*MockMasterRarityMysqlRepository)(nil).FindListByMasterRarityEnum), ctx, masterRarityEnum)
}

// FindOrNil mocks base method.
func (m *MockMasterRarityMysqlRepository) FindOrNil(ctx context.Context, masterRarityId int64) (*MasterRarity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, masterRarityId)
	ret0, _ := ret[0].(*MasterRarity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockMasterRarityMysqlRepositoryMockRecorder) FindOrNil(ctx, masterRarityId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockMasterRarityMysqlRepository)(nil).FindOrNil), ctx, masterRarityId)
}

// FindOrNilByMasterRarityEnum mocks base method.
func (m *MockMasterRarityMysqlRepository) FindOrNilByMasterRarityEnum(ctx context.Context, masterRarityEnum MasterRarityEnum) (*MasterRarity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByMasterRarityEnum", ctx, masterRarityEnum)
	ret0, _ := ret[0].(*MasterRarity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByMasterRarityEnum indicates an expected call of FindOrNilByMasterRarityEnum.
func (mr *MockMasterRarityMysqlRepositoryMockRecorder) FindOrNilByMasterRarityEnum(ctx, masterRarityEnum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByMasterRarityEnum", reflect.TypeOf((*MockMasterRarityMysqlRepository)(nil).FindOrNilByMasterRarityEnum), ctx, masterRarityEnum)
}

// Update mocks base method.
func (m_2 *MockMasterRarityMysqlRepository) Update(ctx context.Context, tx *gorm.DB, m *MasterRarity) (*MasterRarity, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, tx, m)
	ret0, _ := ret[0].(*MasterRarity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMasterRarityMysqlRepositoryMockRecorder) Update(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMasterRarityMysqlRepository)(nil).Update), ctx, tx, m)
}

// UpdateList mocks base method.
func (m *MockMasterRarityMysqlRepository) UpdateList(ctx context.Context, tx *gorm.DB, ms MasterRarities) (MasterRarities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateList", ctx, tx, ms)
	ret0, _ := ret[0].(MasterRarities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateList indicates an expected call of UpdateList.
func (mr *MockMasterRarityMysqlRepositoryMockRecorder) UpdateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateList", reflect.TypeOf((*MockMasterRarityMysqlRepository)(nil).UpdateList), ctx, tx, ms)
}
