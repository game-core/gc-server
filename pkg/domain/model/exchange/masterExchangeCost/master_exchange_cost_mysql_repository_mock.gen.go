// Code generated by MockGen. DO NOT EDIT.
// Source: ./master_exchange_cost_mysql_repository.gen.go

// Package masterExchangeCost is a generated GoMock package.
package masterExchangeCost

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockMasterExchangeCostMysqlRepository is a mock of MasterExchangeCostMysqlRepository interface.
type MockMasterExchangeCostMysqlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMasterExchangeCostMysqlRepositoryMockRecorder
}

// MockMasterExchangeCostMysqlRepositoryMockRecorder is the mock recorder for MockMasterExchangeCostMysqlRepository.
type MockMasterExchangeCostMysqlRepositoryMockRecorder struct {
	mock *MockMasterExchangeCostMysqlRepository
}

// NewMockMasterExchangeCostMysqlRepository creates a new mock instance.
func NewMockMasterExchangeCostMysqlRepository(ctrl *gomock.Controller) *MockMasterExchangeCostMysqlRepository {
	mock := &MockMasterExchangeCostMysqlRepository{ctrl: ctrl}
	mock.recorder = &MockMasterExchangeCostMysqlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasterExchangeCostMysqlRepository) EXPECT() *MockMasterExchangeCostMysqlRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockMasterExchangeCostMysqlRepository) Create(ctx context.Context, tx *gorm.DB, m *MasterExchangeCost) (*MasterExchangeCost, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, tx, m)
	ret0, _ := ret[0].(*MasterExchangeCost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMasterExchangeCostMysqlRepositoryMockRecorder) Create(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMasterExchangeCostMysqlRepository)(nil).Create), ctx, tx, m)
}

// CreateList mocks base method.
func (m *MockMasterExchangeCostMysqlRepository) CreateList(ctx context.Context, tx *gorm.DB, ms MasterExchangeCosts) (MasterExchangeCosts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, tx, ms)
	ret0, _ := ret[0].(MasterExchangeCosts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockMasterExchangeCostMysqlRepositoryMockRecorder) CreateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockMasterExchangeCostMysqlRepository)(nil).CreateList), ctx, tx, ms)
}

// Delete mocks base method.
func (m_2 *MockMasterExchangeCostMysqlRepository) Delete(ctx context.Context, tx *gorm.DB, m *MasterExchangeCost) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMasterExchangeCostMysqlRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMasterExchangeCostMysqlRepository)(nil).Delete), ctx, tx, m)
}

// DeleteList mocks base method.
func (m *MockMasterExchangeCostMysqlRepository) DeleteList(ctx context.Context, tx *gorm.DB, ms MasterExchangeCosts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteList", ctx, tx, ms)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteList indicates an expected call of DeleteList.
func (mr *MockMasterExchangeCostMysqlRepositoryMockRecorder) DeleteList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteList", reflect.TypeOf((*MockMasterExchangeCostMysqlRepository)(nil).DeleteList), ctx, tx, ms)
}

// Find mocks base method.
func (m *MockMasterExchangeCostMysqlRepository) Find(ctx context.Context, masterExchangeCostId int64) (*MasterExchangeCost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, masterExchangeCostId)
	ret0, _ := ret[0].(*MasterExchangeCost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMasterExchangeCostMysqlRepositoryMockRecorder) Find(ctx, masterExchangeCostId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMasterExchangeCostMysqlRepository)(nil).Find), ctx, masterExchangeCostId)
}

// FindByMasterExchangeItemId mocks base method.
func (m *MockMasterExchangeCostMysqlRepository) FindByMasterExchangeItemId(ctx context.Context, masterExchangeItemId int64) (*MasterExchangeCost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMasterExchangeItemId", ctx, masterExchangeItemId)
	ret0, _ := ret[0].(*MasterExchangeCost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMasterExchangeItemId indicates an expected call of FindByMasterExchangeItemId.
func (mr *MockMasterExchangeCostMysqlRepositoryMockRecorder) FindByMasterExchangeItemId(ctx, masterExchangeItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMasterExchangeItemId", reflect.TypeOf((*MockMasterExchangeCostMysqlRepository)(nil).FindByMasterExchangeItemId), ctx, masterExchangeItemId)
}

// FindList mocks base method.
func (m *MockMasterExchangeCostMysqlRepository) FindList(ctx context.Context) (MasterExchangeCosts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", ctx)
	ret0, _ := ret[0].(MasterExchangeCosts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockMasterExchangeCostMysqlRepositoryMockRecorder) FindList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockMasterExchangeCostMysqlRepository)(nil).FindList), ctx)
}

// FindListByMasterExchangeItemId mocks base method.
func (m *MockMasterExchangeCostMysqlRepository) FindListByMasterExchangeItemId(ctx context.Context, masterExchangeItemId int64) (MasterExchangeCosts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByMasterExchangeItemId", ctx, masterExchangeItemId)
	ret0, _ := ret[0].(MasterExchangeCosts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByMasterExchangeItemId indicates an expected call of FindListByMasterExchangeItemId.
func (mr *MockMasterExchangeCostMysqlRepositoryMockRecorder) FindListByMasterExchangeItemId(ctx, masterExchangeItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByMasterExchangeItemId", reflect.TypeOf((*MockMasterExchangeCostMysqlRepository)(nil).FindListByMasterExchangeItemId), ctx, masterExchangeItemId)
}

// FindOrNil mocks base method.
func (m *MockMasterExchangeCostMysqlRepository) FindOrNil(ctx context.Context, masterExchangeCostId int64) (*MasterExchangeCost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, masterExchangeCostId)
	ret0, _ := ret[0].(*MasterExchangeCost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockMasterExchangeCostMysqlRepositoryMockRecorder) FindOrNil(ctx, masterExchangeCostId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockMasterExchangeCostMysqlRepository)(nil).FindOrNil), ctx, masterExchangeCostId)
}

// FindOrNilByMasterExchangeItemId mocks base method.
func (m *MockMasterExchangeCostMysqlRepository) FindOrNilByMasterExchangeItemId(ctx context.Context, masterExchangeItemId int64) (*MasterExchangeCost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByMasterExchangeItemId", ctx, masterExchangeItemId)
	ret0, _ := ret[0].(*MasterExchangeCost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByMasterExchangeItemId indicates an expected call of FindOrNilByMasterExchangeItemId.
func (mr *MockMasterExchangeCostMysqlRepositoryMockRecorder) FindOrNilByMasterExchangeItemId(ctx, masterExchangeItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByMasterExchangeItemId", reflect.TypeOf((*MockMasterExchangeCostMysqlRepository)(nil).FindOrNilByMasterExchangeItemId), ctx, masterExchangeItemId)
}

// Update mocks base method.
func (m_2 *MockMasterExchangeCostMysqlRepository) Update(ctx context.Context, tx *gorm.DB, m *MasterExchangeCost) (*MasterExchangeCost, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, tx, m)
	ret0, _ := ret[0].(*MasterExchangeCost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMasterExchangeCostMysqlRepositoryMockRecorder) Update(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMasterExchangeCostMysqlRepository)(nil).Update), ctx, tx, m)
}

// UpdateList mocks base method.
func (m *MockMasterExchangeCostMysqlRepository) UpdateList(ctx context.Context, tx *gorm.DB, ms MasterExchangeCosts) (MasterExchangeCosts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateList", ctx, tx, ms)
	ret0, _ := ret[0].(MasterExchangeCosts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateList indicates an expected call of UpdateList.
func (mr *MockMasterExchangeCostMysqlRepositoryMockRecorder) UpdateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateList", reflect.TypeOf((*MockMasterExchangeCostMysqlRepository)(nil).UpdateList), ctx, tx, ms)
}
