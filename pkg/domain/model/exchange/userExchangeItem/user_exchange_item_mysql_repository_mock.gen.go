// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_exchange_item_mysql_repository.gen.go

// Package userExchangeItem is a generated GoMock package.
package userExchangeItem

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockUserExchangeItemMysqlRepository is a mock of UserExchangeItemMysqlRepository interface.
type MockUserExchangeItemMysqlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserExchangeItemMysqlRepositoryMockRecorder
}

// MockUserExchangeItemMysqlRepositoryMockRecorder is the mock recorder for MockUserExchangeItemMysqlRepository.
type MockUserExchangeItemMysqlRepositoryMockRecorder struct {
	mock *MockUserExchangeItemMysqlRepository
}

// NewMockUserExchangeItemMysqlRepository creates a new mock instance.
func NewMockUserExchangeItemMysqlRepository(ctrl *gomock.Controller) *MockUserExchangeItemMysqlRepository {
	mock := &MockUserExchangeItemMysqlRepository{ctrl: ctrl}
	mock.recorder = &MockUserExchangeItemMysqlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserExchangeItemMysqlRepository) EXPECT() *MockUserExchangeItemMysqlRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockUserExchangeItemMysqlRepository) Create(ctx context.Context, tx *gorm.DB, m *UserExchangeItem) (*UserExchangeItem, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, tx, m)
	ret0, _ := ret[0].(*UserExchangeItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserExchangeItemMysqlRepositoryMockRecorder) Create(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserExchangeItemMysqlRepository)(nil).Create), ctx, tx, m)
}

// CreateList mocks base method.
func (m *MockUserExchangeItemMysqlRepository) CreateList(ctx context.Context, tx *gorm.DB, ms UserExchangeItems) (UserExchangeItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, tx, ms)
	ret0, _ := ret[0].(UserExchangeItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockUserExchangeItemMysqlRepositoryMockRecorder) CreateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockUserExchangeItemMysqlRepository)(nil).CreateList), ctx, tx, ms)
}

// Delete mocks base method.
func (m_2 *MockUserExchangeItemMysqlRepository) Delete(ctx context.Context, tx *gorm.DB, m *UserExchangeItem) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserExchangeItemMysqlRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserExchangeItemMysqlRepository)(nil).Delete), ctx, tx, m)
}

// DeleteList mocks base method.
func (m *MockUserExchangeItemMysqlRepository) DeleteList(ctx context.Context, tx *gorm.DB, ms UserExchangeItems) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteList", ctx, tx, ms)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteList indicates an expected call of DeleteList.
func (mr *MockUserExchangeItemMysqlRepositoryMockRecorder) DeleteList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteList", reflect.TypeOf((*MockUserExchangeItemMysqlRepository)(nil).DeleteList), ctx, tx, ms)
}

// Find mocks base method.
func (m *MockUserExchangeItemMysqlRepository) Find(ctx context.Context, userId string, masterExchangeItemId int64) (*UserExchangeItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, userId, masterExchangeItemId)
	ret0, _ := ret[0].(*UserExchangeItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockUserExchangeItemMysqlRepositoryMockRecorder) Find(ctx, userId, masterExchangeItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserExchangeItemMysqlRepository)(nil).Find), ctx, userId, masterExchangeItemId)
}

// FindByUserIdAndMasterExchangeId mocks base method.
func (m *MockUserExchangeItemMysqlRepository) FindByUserIdAndMasterExchangeId(ctx context.Context, userId string, masterExchangeId int64) (*UserExchangeItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserIdAndMasterExchangeId", ctx, userId, masterExchangeId)
	ret0, _ := ret[0].(*UserExchangeItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserIdAndMasterExchangeId indicates an expected call of FindByUserIdAndMasterExchangeId.
func (mr *MockUserExchangeItemMysqlRepositoryMockRecorder) FindByUserIdAndMasterExchangeId(ctx, userId, masterExchangeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserIdAndMasterExchangeId", reflect.TypeOf((*MockUserExchangeItemMysqlRepository)(nil).FindByUserIdAndMasterExchangeId), ctx, userId, masterExchangeId)
}

// FindByUserIdAndMasterExchangeItemId mocks base method.
func (m *MockUserExchangeItemMysqlRepository) FindByUserIdAndMasterExchangeItemId(ctx context.Context, userId string, masterExchangeItemId int64) (*UserExchangeItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserIdAndMasterExchangeItemId", ctx, userId, masterExchangeItemId)
	ret0, _ := ret[0].(*UserExchangeItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserIdAndMasterExchangeItemId indicates an expected call of FindByUserIdAndMasterExchangeItemId.
func (mr *MockUserExchangeItemMysqlRepositoryMockRecorder) FindByUserIdAndMasterExchangeItemId(ctx, userId, masterExchangeItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserIdAndMasterExchangeItemId", reflect.TypeOf((*MockUserExchangeItemMysqlRepository)(nil).FindByUserIdAndMasterExchangeItemId), ctx, userId, masterExchangeItemId)
}

// FindList mocks base method.
func (m *MockUserExchangeItemMysqlRepository) FindList(ctx context.Context, userId string) (UserExchangeItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", ctx, userId)
	ret0, _ := ret[0].(UserExchangeItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockUserExchangeItemMysqlRepositoryMockRecorder) FindList(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockUserExchangeItemMysqlRepository)(nil).FindList), ctx, userId)
}

// FindListByUserIdAndMasterExchangeId mocks base method.
func (m *MockUserExchangeItemMysqlRepository) FindListByUserIdAndMasterExchangeId(ctx context.Context, userId string, masterExchangeId int64) (UserExchangeItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByUserIdAndMasterExchangeId", ctx, userId, masterExchangeId)
	ret0, _ := ret[0].(UserExchangeItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByUserIdAndMasterExchangeId indicates an expected call of FindListByUserIdAndMasterExchangeId.
func (mr *MockUserExchangeItemMysqlRepositoryMockRecorder) FindListByUserIdAndMasterExchangeId(ctx, userId, masterExchangeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByUserIdAndMasterExchangeId", reflect.TypeOf((*MockUserExchangeItemMysqlRepository)(nil).FindListByUserIdAndMasterExchangeId), ctx, userId, masterExchangeId)
}

// FindListByUserIdAndMasterExchangeItemId mocks base method.
func (m *MockUserExchangeItemMysqlRepository) FindListByUserIdAndMasterExchangeItemId(ctx context.Context, userId string, masterExchangeItemId int64) (UserExchangeItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByUserIdAndMasterExchangeItemId", ctx, userId, masterExchangeItemId)
	ret0, _ := ret[0].(UserExchangeItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByUserIdAndMasterExchangeItemId indicates an expected call of FindListByUserIdAndMasterExchangeItemId.
func (mr *MockUserExchangeItemMysqlRepositoryMockRecorder) FindListByUserIdAndMasterExchangeItemId(ctx, userId, masterExchangeItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByUserIdAndMasterExchangeItemId", reflect.TypeOf((*MockUserExchangeItemMysqlRepository)(nil).FindListByUserIdAndMasterExchangeItemId), ctx, userId, masterExchangeItemId)
}

// FindOrNil mocks base method.
func (m *MockUserExchangeItemMysqlRepository) FindOrNil(ctx context.Context, userId string, masterExchangeItemId int64) (*UserExchangeItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, userId, masterExchangeItemId)
	ret0, _ := ret[0].(*UserExchangeItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockUserExchangeItemMysqlRepositoryMockRecorder) FindOrNil(ctx, userId, masterExchangeItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockUserExchangeItemMysqlRepository)(nil).FindOrNil), ctx, userId, masterExchangeItemId)
}

// FindOrNilByUserIdAndMasterExchangeId mocks base method.
func (m *MockUserExchangeItemMysqlRepository) FindOrNilByUserIdAndMasterExchangeId(ctx context.Context, userId string, masterExchangeId int64) (*UserExchangeItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByUserIdAndMasterExchangeId", ctx, userId, masterExchangeId)
	ret0, _ := ret[0].(*UserExchangeItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByUserIdAndMasterExchangeId indicates an expected call of FindOrNilByUserIdAndMasterExchangeId.
func (mr *MockUserExchangeItemMysqlRepositoryMockRecorder) FindOrNilByUserIdAndMasterExchangeId(ctx, userId, masterExchangeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByUserIdAndMasterExchangeId", reflect.TypeOf((*MockUserExchangeItemMysqlRepository)(nil).FindOrNilByUserIdAndMasterExchangeId), ctx, userId, masterExchangeId)
}

// FindOrNilByUserIdAndMasterExchangeItemId mocks base method.
func (m *MockUserExchangeItemMysqlRepository) FindOrNilByUserIdAndMasterExchangeItemId(ctx context.Context, userId string, masterExchangeItemId int64) (*UserExchangeItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByUserIdAndMasterExchangeItemId", ctx, userId, masterExchangeItemId)
	ret0, _ := ret[0].(*UserExchangeItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByUserIdAndMasterExchangeItemId indicates an expected call of FindOrNilByUserIdAndMasterExchangeItemId.
func (mr *MockUserExchangeItemMysqlRepositoryMockRecorder) FindOrNilByUserIdAndMasterExchangeItemId(ctx, userId, masterExchangeItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByUserIdAndMasterExchangeItemId", reflect.TypeOf((*MockUserExchangeItemMysqlRepository)(nil).FindOrNilByUserIdAndMasterExchangeItemId), ctx, userId, masterExchangeItemId)
}

// Update mocks base method.
func (m_2 *MockUserExchangeItemMysqlRepository) Update(ctx context.Context, tx *gorm.DB, m *UserExchangeItem) (*UserExchangeItem, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, tx, m)
	ret0, _ := ret[0].(*UserExchangeItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserExchangeItemMysqlRepositoryMockRecorder) Update(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserExchangeItemMysqlRepository)(nil).Update), ctx, tx, m)
}

// UpdateList mocks base method.
func (m *MockUserExchangeItemMysqlRepository) UpdateList(ctx context.Context, tx *gorm.DB, ms UserExchangeItems) (UserExchangeItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateList", ctx, tx, ms)
	ret0, _ := ret[0].(UserExchangeItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateList indicates an expected call of UpdateList.
func (mr *MockUserExchangeItemMysqlRepositoryMockRecorder) UpdateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateList", reflect.TypeOf((*MockUserExchangeItemMysqlRepository)(nil).UpdateList), ctx, tx, ms)
}
