// Code generated by MockGen. DO NOT EDIT.
// Source: ./master_exchange_item_mysql_repository.gen.go

// Package masterExchangeItem is a generated GoMock package.
package masterExchangeItem

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockMasterExchangeItemMysqlRepository is a mock of MasterExchangeItemMysqlRepository interface.
type MockMasterExchangeItemMysqlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMasterExchangeItemMysqlRepositoryMockRecorder
}

// MockMasterExchangeItemMysqlRepositoryMockRecorder is the mock recorder for MockMasterExchangeItemMysqlRepository.
type MockMasterExchangeItemMysqlRepositoryMockRecorder struct {
	mock *MockMasterExchangeItemMysqlRepository
}

// NewMockMasterExchangeItemMysqlRepository creates a new mock instance.
func NewMockMasterExchangeItemMysqlRepository(ctrl *gomock.Controller) *MockMasterExchangeItemMysqlRepository {
	mock := &MockMasterExchangeItemMysqlRepository{ctrl: ctrl}
	mock.recorder = &MockMasterExchangeItemMysqlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasterExchangeItemMysqlRepository) EXPECT() *MockMasterExchangeItemMysqlRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockMasterExchangeItemMysqlRepository) Create(ctx context.Context, tx *gorm.DB, m *MasterExchangeItem) (*MasterExchangeItem, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, tx, m)
	ret0, _ := ret[0].(*MasterExchangeItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMasterExchangeItemMysqlRepositoryMockRecorder) Create(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMasterExchangeItemMysqlRepository)(nil).Create), ctx, tx, m)
}

// CreateList mocks base method.
func (m *MockMasterExchangeItemMysqlRepository) CreateList(ctx context.Context, tx *gorm.DB, ms MasterExchangeItems) (MasterExchangeItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, tx, ms)
	ret0, _ := ret[0].(MasterExchangeItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockMasterExchangeItemMysqlRepositoryMockRecorder) CreateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockMasterExchangeItemMysqlRepository)(nil).CreateList), ctx, tx, ms)
}

// Delete mocks base method.
func (m_2 *MockMasterExchangeItemMysqlRepository) Delete(ctx context.Context, tx *gorm.DB, m *MasterExchangeItem) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMasterExchangeItemMysqlRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMasterExchangeItemMysqlRepository)(nil).Delete), ctx, tx, m)
}

// DeleteList mocks base method.
func (m *MockMasterExchangeItemMysqlRepository) DeleteList(ctx context.Context, tx *gorm.DB, ms MasterExchangeItems) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteList", ctx, tx, ms)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteList indicates an expected call of DeleteList.
func (mr *MockMasterExchangeItemMysqlRepositoryMockRecorder) DeleteList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteList", reflect.TypeOf((*MockMasterExchangeItemMysqlRepository)(nil).DeleteList), ctx, tx, ms)
}

// Find mocks base method.
func (m *MockMasterExchangeItemMysqlRepository) Find(ctx context.Context, masterExchangeItemId int64) (*MasterExchangeItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, masterExchangeItemId)
	ret0, _ := ret[0].(*MasterExchangeItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMasterExchangeItemMysqlRepositoryMockRecorder) Find(ctx, masterExchangeItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMasterExchangeItemMysqlRepository)(nil).Find), ctx, masterExchangeItemId)
}

// FindByMasterExchangeId mocks base method.
func (m *MockMasterExchangeItemMysqlRepository) FindByMasterExchangeId(ctx context.Context, masterExchangeId int64) (*MasterExchangeItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMasterExchangeId", ctx, masterExchangeId)
	ret0, _ := ret[0].(*MasterExchangeItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMasterExchangeId indicates an expected call of FindByMasterExchangeId.
func (mr *MockMasterExchangeItemMysqlRepositoryMockRecorder) FindByMasterExchangeId(ctx, masterExchangeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMasterExchangeId", reflect.TypeOf((*MockMasterExchangeItemMysqlRepository)(nil).FindByMasterExchangeId), ctx, masterExchangeId)
}

// FindByMasterExchangeItemId mocks base method.
func (m *MockMasterExchangeItemMysqlRepository) FindByMasterExchangeItemId(ctx context.Context, masterExchangeItemId int64) (*MasterExchangeItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMasterExchangeItemId", ctx, masterExchangeItemId)
	ret0, _ := ret[0].(*MasterExchangeItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMasterExchangeItemId indicates an expected call of FindByMasterExchangeItemId.
func (mr *MockMasterExchangeItemMysqlRepositoryMockRecorder) FindByMasterExchangeItemId(ctx, masterExchangeItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMasterExchangeItemId", reflect.TypeOf((*MockMasterExchangeItemMysqlRepository)(nil).FindByMasterExchangeItemId), ctx, masterExchangeItemId)
}

// FindList mocks base method.
func (m *MockMasterExchangeItemMysqlRepository) FindList(ctx context.Context) (MasterExchangeItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", ctx)
	ret0, _ := ret[0].(MasterExchangeItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockMasterExchangeItemMysqlRepositoryMockRecorder) FindList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockMasterExchangeItemMysqlRepository)(nil).FindList), ctx)
}

// FindListByMasterExchangeId mocks base method.
func (m *MockMasterExchangeItemMysqlRepository) FindListByMasterExchangeId(ctx context.Context, masterExchangeId int64) (MasterExchangeItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByMasterExchangeId", ctx, masterExchangeId)
	ret0, _ := ret[0].(MasterExchangeItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByMasterExchangeId indicates an expected call of FindListByMasterExchangeId.
func (mr *MockMasterExchangeItemMysqlRepositoryMockRecorder) FindListByMasterExchangeId(ctx, masterExchangeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByMasterExchangeId", reflect.TypeOf((*MockMasterExchangeItemMysqlRepository)(nil).FindListByMasterExchangeId), ctx, masterExchangeId)
}

// FindListByMasterExchangeItemId mocks base method.
func (m *MockMasterExchangeItemMysqlRepository) FindListByMasterExchangeItemId(ctx context.Context, masterExchangeItemId int64) (MasterExchangeItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByMasterExchangeItemId", ctx, masterExchangeItemId)
	ret0, _ := ret[0].(MasterExchangeItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByMasterExchangeItemId indicates an expected call of FindListByMasterExchangeItemId.
func (mr *MockMasterExchangeItemMysqlRepositoryMockRecorder) FindListByMasterExchangeItemId(ctx, masterExchangeItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByMasterExchangeItemId", reflect.TypeOf((*MockMasterExchangeItemMysqlRepository)(nil).FindListByMasterExchangeItemId), ctx, masterExchangeItemId)
}

// FindOrNil mocks base method.
func (m *MockMasterExchangeItemMysqlRepository) FindOrNil(ctx context.Context, masterExchangeItemId int64) (*MasterExchangeItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, masterExchangeItemId)
	ret0, _ := ret[0].(*MasterExchangeItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockMasterExchangeItemMysqlRepositoryMockRecorder) FindOrNil(ctx, masterExchangeItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockMasterExchangeItemMysqlRepository)(nil).FindOrNil), ctx, masterExchangeItemId)
}

// FindOrNilByMasterExchangeId mocks base method.
func (m *MockMasterExchangeItemMysqlRepository) FindOrNilByMasterExchangeId(ctx context.Context, masterExchangeId int64) (*MasterExchangeItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByMasterExchangeId", ctx, masterExchangeId)
	ret0, _ := ret[0].(*MasterExchangeItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByMasterExchangeId indicates an expected call of FindOrNilByMasterExchangeId.
func (mr *MockMasterExchangeItemMysqlRepositoryMockRecorder) FindOrNilByMasterExchangeId(ctx, masterExchangeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByMasterExchangeId", reflect.TypeOf((*MockMasterExchangeItemMysqlRepository)(nil).FindOrNilByMasterExchangeId), ctx, masterExchangeId)
}

// FindOrNilByMasterExchangeItemId mocks base method.
func (m *MockMasterExchangeItemMysqlRepository) FindOrNilByMasterExchangeItemId(ctx context.Context, masterExchangeItemId int64) (*MasterExchangeItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByMasterExchangeItemId", ctx, masterExchangeItemId)
	ret0, _ := ret[0].(*MasterExchangeItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByMasterExchangeItemId indicates an expected call of FindOrNilByMasterExchangeItemId.
func (mr *MockMasterExchangeItemMysqlRepositoryMockRecorder) FindOrNilByMasterExchangeItemId(ctx, masterExchangeItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByMasterExchangeItemId", reflect.TypeOf((*MockMasterExchangeItemMysqlRepository)(nil).FindOrNilByMasterExchangeItemId), ctx, masterExchangeItemId)
}

// Update mocks base method.
func (m_2 *MockMasterExchangeItemMysqlRepository) Update(ctx context.Context, tx *gorm.DB, m *MasterExchangeItem) (*MasterExchangeItem, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, tx, m)
	ret0, _ := ret[0].(*MasterExchangeItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMasterExchangeItemMysqlRepositoryMockRecorder) Update(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMasterExchangeItemMysqlRepository)(nil).Update), ctx, tx, m)
}

// UpdateList mocks base method.
func (m *MockMasterExchangeItemMysqlRepository) UpdateList(ctx context.Context, tx *gorm.DB, ms MasterExchangeItems) (MasterExchangeItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateList", ctx, tx, ms)
	ret0, _ := ret[0].(MasterExchangeItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateList indicates an expected call of UpdateList.
func (mr *MockMasterExchangeItemMysqlRepositoryMockRecorder) UpdateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateList", reflect.TypeOf((*MockMasterExchangeItemMysqlRepository)(nil).UpdateList), ctx, tx, ms)
}
