// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/game-core/gc-server/api/game/presentation/handler/health"
	"github.com/game-core/gc-server/api/game/presentation/interceptor/auth"
	health2 "github.com/game-core/gc-server/api/game/usecase/health"
	"github.com/game-core/gc-server/config/database"
	"github.com/game-core/gc-server/pkg/domain/model/account"
	health3 "github.com/game-core/gc-server/pkg/domain/model/health"
	"github.com/game-core/gc-server/pkg/infrastructure/mysql/common/commonHealth"
	"github.com/game-core/gc-server/pkg/infrastructure/mysql/master/masterHealth"
	"github.com/game-core/gc-server/pkg/infrastructure/mysql/user/userAccount"
	"github.com/game-core/gc-server/pkg/infrastructure/redis/user/userAccountToken"
)

// Injectors from wire.go:

func InitializeAuthInterceptor() auth.AuthInterceptor {
	accountService := InitializeAccountService()
	authInterceptor := auth.NewAuthInterceptor(accountService)
	return authInterceptor
}

func InitializeHealthHandler() health.HealthHandler {
	healthUsecase := InitializeHealthUsecase()
	healthHandler := health.NewHealthHandler(healthUsecase)
	return healthHandler
}

func InitializeHealthUsecase() health2.HealthUsecase {
	healthService := InitializeHealthService()
	healthUsecase := health2.NewHealthUsecase(healthService)
	return healthUsecase
}

func InitializeAccountService() account.AccountService {
	mysqlHandler := database.NewMysql()
	userAccountMysqlRepository := userAccount.NewUserAccountDao(mysqlHandler)
	redisHandler := database.NewRedis()
	userAccountTokenRedisRepository := userAccountToken.NewUserAccountTokenDao(redisHandler)
	accountService := account.NewAccountService(userAccountMysqlRepository, userAccountTokenRedisRepository)
	return accountService
}

func InitializeHealthService() health3.HealthService {
	mysqlHandler := database.NewMysql()
	commonHealthMysqlRepository := commonHealth.NewCommonHealthDao(mysqlHandler)
	masterHealthMysqlRepository := masterHealth.NewMasterHealthDao(mysqlHandler)
	healthService := health3.NewHealthService(commonHealthMysqlRepository, masterHealthMysqlRepository)
	return healthService
}
