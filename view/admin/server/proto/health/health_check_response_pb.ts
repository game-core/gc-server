// ヘルスチェックレスポンス

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file health/health_check_response.proto (package api.admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { AdminHealth } from "./adminHealth/admin_health_pb.js";
import { CommonHealth } from "./commonHealth/common_health_pb.js";
import { MasterHealth } from "./masterHealth/master_health_pb.js";

/**
 * @generated from message api.admin.HealthCheckResponse
 */
export class HealthCheckResponse extends Message<HealthCheckResponse> {
  /**
   * @generated from field: optional api.admin.AdminHealth admin_health = 1;
   */
  adminHealth?: AdminHealth;

  /**
   * @generated from field: optional api.admin.CommonHealth common_health = 2;
   */
  commonHealth?: CommonHealth;

  /**
   * @generated from field: optional api.admin.MasterHealth master_health = 3;
   */
  masterHealth?: MasterHealth;

  constructor(data?: PartialMessage<HealthCheckResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.admin.HealthCheckResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin_health", kind: "message", T: AdminHealth, opt: true },
    {
      no: 2,
      name: "common_health",
      kind: "message",
      T: CommonHealth,
      opt: true,
    },
    {
      no: 3,
      name: "master_health",
      kind: "message",
      T: MasterHealth,
      opt: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): HealthCheckResponse {
    return new HealthCheckResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): HealthCheckResponse {
    return new HealthCheckResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): HealthCheckResponse {
    return new HealthCheckResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: HealthCheckResponse | PlainMessage<HealthCheckResponse> | undefined,
    b: HealthCheckResponse | PlainMessage<HealthCheckResponse> | undefined
  ): boolean {
    return proto3.util.equals(HealthCheckResponse, a, b);
  }
}
